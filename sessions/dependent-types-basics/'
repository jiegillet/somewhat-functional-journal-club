import Prelude
%hide Nat
%hide Maybe

data Nat = Z | S Nat

add : Nat -> Nat -> Nat
add Z m = m
add (S n) m = S (add n m)


-- Extended notation for type declaration
data Nat' : Type where
  Z' : Nat'
  S' : Nat' -> Nat'


-- Expression which returns a type
f : Bool -> Type
f True = Int
f False = String

-- Dependent function
g : (n : Bool) -> f n
g True = 0
g False = "Hello"


-- Implicit arguments
myId : (a : Type) -> a -> a
myId a x = x

myId' : a -> a
myId' x = x

myId'' : {a : Type} -> a -> a
myId'' x = x


data Maybe a = Nothing | Just a

data Maybe' : (a : Type) -> Type where
  Nothing' : Maybe' a
  Just' : a -> Maybe' a

